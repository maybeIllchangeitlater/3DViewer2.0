#version 410 core
#ifdef GL_KHR_blend_equation_advanced
#extension GL_ARB_fragment_coord_conventions : enable
#extension GL_KHR_blend_equation_advanced : enable
#endif
#define lowp
#define mediump
#define highp

in vec3 fragPosition;
in vec3 fragNormal;
in vec2 textureCoord;

uniform vec4 lineColor;
uniform vec3 lightColor;
uniform vec3 lightPosistion;
uniform vec3 cameraPosition;

uniform float ambient;
uniform float specular;

uniform bool textured;
uniform bool normales;
uniform bool flat;

uniform sampler2D texture;


out vec4 finalColor;

void main()
{
    ver color;
    if (textured)
            color = texture2D(texture, textureCoord).rgb;
        else
            color = lineColor;
    if  (normales){
        vec3 normal = normalize(fragNormal);

        vec3 lightDirection = normalize(lightPosistion);

        // Calculate the diffuse reflection
        float diffuse = max(dot(normal, lightDirection), 0.0);

        float finalDiff = diffuse * lightColor;

        vec3 cameraDirection = normalize(cameraPosition - fragPosition)
        vec3 reflectDirection = reflect(-lightDirection, normal);

        float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);
        vec3 specc = specular * spec * lightColor;

        // Combine the diffuse reflection, ambient and specular with the color
        finalColor = color * (ambient + diffuse + specc)
    }else{
        finalColor = color;
    }
}
