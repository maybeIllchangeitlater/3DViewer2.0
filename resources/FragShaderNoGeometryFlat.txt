#version 410 core

#ifdef GL_KHR_blend_equation_advanced
#extension GL_ARB_fragment_coord_conventions : enable
#extension GL_KHR_blend_equation_advanced : enable
#endif

#define lowp
#define mediump
#define highp

in vec3 fragPosition;
in vec2 textureCoord;
in vec3 fragNormal;

uniform vec4 lineColor;
uniform vec3 lightColor;
uniform vec3 lightPosistion;
uniform vec3 cameraPosition;

uniform float ambient;
uniform float specular;

uniform bool textured;
uniform bool normales;

uniform sampler2D texture1;

out vec4 finalColor;

void main()
{
    vec3 color;
    if (textured)
        color = texture(texture1, textureCoord).rgb;
    else
        color = lineColor.rgb;

    if (normales) {
        vec3 normal = normalize(fragNormal);
        vec3 lightDirection = normalize(lightPosition - fragPosition);

        // Calculate the diffuse reflection
        float diffuse = max(dot(normal, lightDirection), 0.0) * max(dot(lightColor, vec3(1.0)), 0.0);

        vec3 cameraDirection = normalize(cameraPosition - fragPosition);
        vec3 reflectDirection = reflect(-lightDirection, normal);

        // Calculate specular reflection
        float spec = pow(max(dot(cameraDirection, reflectDirection), 0.0), 32.0);
        vec3 specc = specular * spec * lightColor;

        // Combine the diffuse reflection, ambient, and specular with the color
        finalColor = vec4(color * (ambient + diffuse + specc), 1.0);
    } else {
        finalColor = vec4(color, 1.0);
    }
}


