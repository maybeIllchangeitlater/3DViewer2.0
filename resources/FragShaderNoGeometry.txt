#version 410 core
#ifdef GL_KHR_blend_equation_advanced
#extension GL_ARB_fragment_coord_conventions : enable
#extension GL_KHR_blend_equation_advanced : enable
#endif
#define lowp
#define mediump
#define highp

in vec3 fragPosition;
in vec2 textureCoord;
in vec3 fragNormal;

uniform vec4 lineColor;
uniform vec4 lightColor;
uniform vec3 lightPosistion;
uniform vec3 cameraPosition;

out vec4 finalColor;

void main()
{
    vec3 normal = normalize(fragNormal);

    // Use a fixed light direction (you may want to pass this as a uniform)
    vec3 lightDirection = normalize(vec3(lightPosistion - fragPosition));

    // Calculate the diffuse reflection
    float diffuse = max(dot(normal, lightDirection), 0.0);


    vec3 viewDir = normalize(cameraPosition - fragPosition);
    vec3 reflectDir = reflect(-lightDirection, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);
    vec3 combinedColor = lineColor.rgb * (0.1 + diffuse + lightColor.rgb * 0.5 * spec); //0.1 is ambient 0.5 is specular strength
    //vec3 combinedColor = lineColor.rgb * diffuse * (lightColor.rgb * 0.5);

    // Combine the diffuse reflection with the line color
    finalColor = vec4(combinedColor, lineColor.a);
}
